// class Collectable
class Collectable {
  private String name;
  private String gameObjectImageFile;
  //Could be expanded to add an amount, for example
  
  public Collectable(String name, String gameObjectImageFile) {
    this.name = name;
    this.gameObjectImageFile = gameObjectImageFile;
  }
  
  public String getName() { 
    return name; 
  }
  
  public String getGameObjectImageFile() { 
    return gameObjectImageFile; 
  } 
  
  @Override 
  public boolean equals(Object obj) { 
    if (obj == this) { return true; } 
    if (obj == null || obj.getClass() != this.getClass()) { return false; } 
    Collectable otherCollectable = (Collectable) obj; 
    return otherCollectable.getName().equals(this.name);
  } 

  @Override 
  public int hashCode() { 
    final int prime = 13;
    return prime * this.name.hashCode();
  }
}



// class CollectableObject
class CollectableObject extends GameObject {
  private Collectable collectable;
  private GameObject replaceWith;
  private boolean willReplaceByAnotherGameObject;

  public CollectableObject(String identifier, int x, int y, int owidth,
    int oheight,boolean isActive, Collectable collectable) {
    this(identifier, x, y, owidth, oheight,isActive, collectable, null);
  }

  public CollectableObject(String identifier, int x, int y, int owidth,
    int oheight,boolean isActive, Collectable collectable, GameObject replaceWith) {
    super(identifier, x, y, owidth, oheight,isActive, collectable.getGameObjectImageFile());
    this.collectable = collectable;
    if (replaceWith != null) {
      this.replaceWith = replaceWith;
      this.willReplaceByAnotherGameObject = true;
    } else {
      this.willReplaceByAnotherGameObject = false;
    }
  }
  public void PutToInventory()
  {
    inventoryManager.addCollectable(collectable);
    inventoryManager.addInventoryItem(replaceWith);
    for (int i=0; i< inventoryManager.isFull.length; i++)
    {
      if (inventoryManager.isFull[i] == false)
      {
        replaceWith.x= 100+100*i;
        replaceWith.InvX = 100+100*i;
        replaceWith.y=50;
        replaceWith.InvY=50;
        if (willReplaceByAnotherGameObject) {
          sceneManager.getCurrentScene().addGameObject(replaceWith);
        }
        inventoryManager.isFull[i] = true;
        break;
      }
    }
  }
  @Override
    public void draw() {
    super.draw();
  }

  @Override
    public void mouseClicked() {
    if (mouseIsHovering) {
      sceneManager.getCurrentScene().removeGameObject(this);
      this.PutToInventory();
    }
  }

    public void mouseDragged() {
    super.mouseDragged();
  }
}

// class GameObject
class GameObject {
  protected int InvX;
  protected int InvY;
  protected int x;
  protected int y;
  protected int owidth;
  protected int oheight;
  private String identifier;
  protected boolean isLetter;
  protected boolean isEraser;
  protected boolean isWater;
  private boolean hasImage;
  private boolean hasHoverImage;
  private PImage gameObjectImage;
  private PImage gameObjectImageHover;
  private boolean hasCopy;
  protected boolean mouseIsHovering;
  protected boolean isClicked;
  protected boolean isHolding;
  protected boolean isActive;
  protected GameObject replaceWith;
  protected GameObject copy;
  protected GameObject deleteObject;
  protected GameObject spawnObject;
  protected Scene scene;




  public GameObject(String identifier, int x, int y, int owidth, int oheight, boolean isActive) {
    this(identifier, x, y, owidth, oheight, isActive, "", false, null);
  }
  public GameObject(String identifier, int owidth, int oheight, boolean isActive, String gameObjectImageFile) {
    this.identifier = identifier;
    this.x = 0;
    this.y = 0;
    this.owidth = owidth;
    this.oheight = oheight;
    this.isActive = isActive;
    this.hasImage = !gameObjectImageFile.equals("");
    if (this.hasImage) {
      this.gameObjectImage = loadImage(gameObjectImageFile);
    }
  }


  public GameObject(String identifier, int x, int y, int owidth, int oheight, boolean isActive, String gameObjectImageFile) {
    this.identifier = identifier;
    this.x = x;
    this.y = y;
    this.owidth = owidth;
    this.oheight = oheight;
    this.isActive = isActive;
    this.hasImage = !gameObjectImageFile.equals("");
    if (this.hasImage) {
      this.gameObjectImage = loadImage(gameObjectImageFile);
    }
    hasHoverImage = false;
    mouseIsHovering = false;
  }


  public GameObject(String identifier, int x, int y, int owidth, int oheight, boolean isActive, String gameObjectImageFile, boolean isEraser, MoveToSceneObject deleteObject, CollectableObject spawnObject) {
    this.identifier = identifier;
    this.x = x;
    this.y = y;
    this.owidth = owidth;
    this.oheight = oheight;
    this.deleteObject = deleteObject;
    this.spawnObject = spawnObject;
    this.isEraser = isEraser;
    this.isActive = isActive;
    this.hasImage = !gameObjectImageFile.equals("");
    if (this.hasImage) {
      this.gameObjectImage = loadImage(gameObjectImageFile);
    }
    hasHoverImage = false;
    mouseIsHovering = false;
  }

  public GameObject(String identifier, int x, int y, int owidth, int oheight, boolean isActive, String gameObjectImageFile, boolean isLetter, GameObject copy) {
    this.identifier = identifier;
    this.x = x;
    this.y = y;
    this.owidth = owidth;
    this.oheight = oheight;
    this.hasImage = !gameObjectImageFile.equals("");
    this.isLetter = isLetter;
    this.isActive = isActive;
    this.hasCopy = !copy.equals(null);
    if (this.hasCopy)
    {
      this.copy = copy;
    }

    if (this.hasImage) {
      this.gameObjectImage = loadImage(gameObjectImageFile);
    }
    hasHoverImage = false;
    mouseIsHovering = false;
  }

  public void setHoverImage(String gameObjectImageHoverFile) {
    this.gameObjectImageHover = loadImage(gameObjectImageHoverFile);
    hasHoverImage = true;
  }

  public void draw() {
    if (isActive) {
      if (hasImage) {
        if (mouseIsHovering && hasHoverImage) {
          image(gameObjectImageHover, x, y, owidth, oheight);
        } else {
          image(gameObjectImage, x, y, owidth, oheight);
        }
      }
    }
  }

  public void mouseMoved() {
    mouseIsHovering = false;
    if (mouseX >= x && mouseX <= x + owidth &&
      mouseY >= y && mouseY <= y + oheight) {
      mouseIsHovering = true;
    }
  }

  public void mouseDragged()
  {
    //if (mouseIsHovering) {
    //  this.x = mouseX;
    //  this.y = mouseY;
    //}
  }
  public void mouseReleased()
  {
    //if (mouseIsHovering) {
    //  this.x = InvX;
    //  this.y = InvY;
    //}
  }

  public void mouseClicked()
  {
    if (mouseIsHovering) {
      if (this.isLetter)
      {
        for (int i =0; i< lettersManager.hasLetter.length; i++)
        {
          if (lettersManager.hasLetter[i] == false)
          {
            this.copy.x = 650+100*i;
            this.copy.y = 400;
            if (hasCopy) {
              sceneManager.getCurrentScene().addGameObject(this.copy);
            }
            lettersManager.hasLetter[i] = true;
            lettersManager.word.add(this.copy);
            lettersManager.words ++;
            break;
          }
        }
      }
      if (this.isEraser)
      {
        if (lettersManager.words == lettersManager.hasLetter.length) {
          if (lettersManager.word.get(0).getIdentifier() == "LetterGCopy" && lettersManager.word.get(1).getIdentifier() == "LetterOCopy"
            && lettersManager.word.get(2).getIdentifier() == "LetterBCopy" && lettersManager.word.get(3).getIdentifier() == "LetterLCopy"
            && lettersManager.word.get(4).getIdentifier() == "LetterECopy" && lettersManager.word.get(5).getIdentifier() == "LetterTCopy") {
            sceneManager.goToPreviousScene();
            sceneManager.getCurrentScene().removeGameObject(this.deleteObject);
            sceneManager.getCurrentScene().addGameObject(this.spawnObject);
          } else {
            for (GameObject object : lettersManager.word) {
              sceneManager.getCurrentScene().removeGameObject(object);
              lettersManager.word = new ArrayList<GameObject>();
              lettersManager.hasLetter = new boolean[6];
              lettersManager.words = 0;
            }
          }
        } else {
          for (GameObject object : lettersManager.word) {
            sceneManager.getCurrentScene().removeGameObject(object);
            lettersManager.word = new ArrayList<GameObject>();
            lettersManager.hasLetter = new boolean[6];
            lettersManager.words = 0;
          }
        }
      }
    }
  }
  public void mousePressed()
  {
  }

  public String getIdentifier() {
    return this.identifier;
  }

  @Override
    public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null || obj.getClass() != this.getClass()) {
      return false;
    }
    GameObject otherGameObject = (GameObject) obj;
    return otherGameObject.getIdentifier().equals(this.identifier);
  }

  @Override
    public int hashCode() {
    final int prime = 11;
    return prime * this.identifier.hashCode();
  }
}

//class InventoryManager
class InventoryManager {
  public boolean[] isFull = new boolean[5];
  public ArrayList<GameObject> inventoryItems;
  private ArrayList<GameObject> markedForDeathItems;
  private ArrayList<Collectable> collectables;
  private ArrayList<Collectable> markedForDeathCollectables;
  public ArrayList <GameObject> bowls;



  public InventoryManager() {
    markedForDeathItems = new ArrayList<GameObject>();
    collectables = new ArrayList<Collectable>();
    markedForDeathCollectables = new ArrayList<Collectable>();
    inventoryItems = new ArrayList<GameObject>();
    bowls = new ArrayList<GameObject>();
  }

  public void addInventoryItem(GameObject item)
  {
    inventoryItems.add(item);
  }

  public void addCollectable(Collectable collectable) {
    collectables.add(collectable);
  }
 

  public void removeCollectable(Collectable collectable) {
    markedForDeathCollectables.add(collectable);
  }
  
  public void removeInventoryItem(GameObject object){
    markedForDeathItems.add(object);
  }

  public boolean containsCollectable(Collectable collectable) {
    return collectables.contains(collectable);
  }

  public void clearMarkedForDeathCollectables() {
    if (markedForDeathCollectables.size() > 0) {
      for (Collectable collectable : markedForDeathCollectables) {
        collectables.remove(collectable);
      }
      markedForDeathCollectables  = new ArrayList<Collectable>();
    }
  }
  
  public void clearMarkedForDeathItems(){
    if (markedForDeathItems.size() > 0) {
      for (GameObject object : markedForDeathItems) {
        inventoryItems.remove(object);
      }
      markedForDeathItems  = new ArrayList<GameObject>();
    }
  }
}

//class LettersManager
class LettersManager {
  public ArrayList<GameObject> word;
  public boolean[] hasLetter = new boolean[6];
  public int words = 0;

  public LettersManager() {
    word = new ArrayList<GameObject>();

  }
}
// class MoveToSceneObject
class MoveToSceneObject extends GameObject {

  private String nextSceneIdentifier;
  private boolean moveBack;

  public MoveToSceneObject(String identifier, int x, int y, int owidth, int oheight, boolean isActive, boolean moveBack) {
    this(identifier, x, y, owidth, oheight, isActive, "", moveBack);
  }

  public MoveToSceneObject(String identifier, int x, int y, int owidth, int oheight, boolean isActive, String gameObjectImageFile, boolean moveBack) {
    super(identifier, x, y, owidth, oheight, isActive, gameObjectImageFile);
    this.moveBack = moveBack;
  }

  public MoveToSceneObject(String identifier, int x, int y, int owidth, int oheight, boolean isActive, String nextSceneIdentifier) {
    this(identifier, x, y, owidth, oheight, isActive, "", nextSceneIdentifier);
  }

  public MoveToSceneObject(String identifier, int x, int y, int owidth, int oheight, boolean isActive, String gameObjectImageFile, String nextSceneIdentifier) {
    super(identifier, x, y, owidth, oheight, isActive, gameObjectImageFile);
    this.nextSceneIdentifier = nextSceneIdentifier;
    this.moveBack = false;
  }

  @Override
    public void mouseClicked() {
    if (mouseIsHovering && isActive) {
      if (moveBack) {
        sceneManager.goToPreviousScene();
      } else {
        try {
          sceneManager.goToScene(nextSceneIdentifier);
        }
        catch(Exception e) {
          println(e.getMessage());
        }
      }
    }
  }
}

// class RequireObject
class RequireObject extends TextObject {
  private Collectable collectable;
  private Collectable addCollectable;
  private GameObject replaceWith;
  private GameObject addObject;
  private GameObject deleteObject;
  private Scene scene;
  private String goToScene;
  private boolean bowl;



  public RequireObject(String identifier, int x, int y, int owidth, int oheight, boolean isActive,
    String gameObjectImageFile,
    Collectable collectable, Collectable addCollectable, GameObject deleteObject, GameObject addObject) {
    super(identifier, x, y, owidth, oheight, isActive, gameObjectImageFile, "");
    this.collectable = collectable;
    this.addCollectable = addCollectable;
    this.addObject = addObject;
    this.deleteObject = deleteObject;
  }
  public RequireObject(String identifier, int x, int y, int owidth, int oheight, boolean isActive,
    String gameObjectImageFile,
    Collectable collectable, Collectable addCollectable, GameObject deleteObject, GameObject addObject, GameObject replaceWith, boolean bowl, String goToScene) {
    super(identifier, x, y, owidth, oheight, isActive, gameObjectImageFile, "");
    this.collectable = collectable;
    this.addCollectable = addCollectable;
    this.addObject = addObject;
    this.deleteObject = deleteObject;
    this.replaceWith = replaceWith;
    this.goToScene = goToScene;
    this.bowl = bowl;
  }

  public RequireObject(String identifier, int x, int y, int owidth, int oheight, boolean isActive,
    String gameObjectImageFile, String text,
    Collectable collectable) {
    super(identifier, x, y, owidth, oheight, isActive, gameObjectImageFile, text);
    this.collectable = collectable;
    this.replaceWith = replaceWith;
  }

  @Override
    public void mouseClicked() {
    if (mouseIsHovering && inventoryManager.containsCollectable(collectable)) {
      inventoryManager.removeCollectable(collectable);
      inventoryManager.addCollectable(addCollectable);
      inventoryManager.isFull[inventoryManager.inventoryItems.indexOf(deleteObject)] = false;
      if (this.addObject.x ==0 && this.addObject.x == 0) {
        this.addObject.x = 100 + 100 * inventoryManager.inventoryItems.indexOf(deleteObject);
        this.addObject.y = 50;
      }
      inventoryManager.removeInventoryItem(deleteObject);
      inventoryManager.inventoryItems.add(inventoryManager.inventoryItems.indexOf(deleteObject), addObject);
      inventoryManager.isFull[inventoryManager.inventoryItems.indexOf(deleteObject)] = true;
      sceneManager.getCurrentScene().addGameObject(addObject);
      sceneManager.getCurrentScene().removeGameObject(deleteObject);
      if (this.replaceWith != null) {
        sceneManager.getCurrentScene().removeGameObject(this);
        sceneManager.getCurrentScene().addGameObject(this.replaceWith);
        if (this.bowl) {
          inventoryManager.bowls.add(this.replaceWith);
          if (inventoryManager.bowls.size() == 2) {
            try {
              sceneManager.goToScene(goToScene);
            }
            catch(Exception e) {
              println(e.getMessage());
            }
            //scene.checkObject("rightArrowMain").isActive = false;
            //scene.checkObject("rightArrowMainLight").isActive = true;
          }
        }
      }
    } else {
      super.mouseClicked();
    }
  }
}

//class Scene
class Scene {
  public GameObject gameObject;
  private String sceneName;
  private PImage backgroundImage;
  private ArrayList<GameObject> gameObjects;
  private ArrayList<GameObject> recentlyAddedGameObjects;
  private ArrayList<GameObject> markedForDeathGameObjects;

  public Scene(String sceneName, String backgroundImageFile) {
    this.sceneName = sceneName;
    this.backgroundImage = loadImage(backgroundImageFile);
    gameObjects = new ArrayList<GameObject>();
    markedForDeathGameObjects = new ArrayList<GameObject>();
    recentlyAddedGameObjects = new ArrayList<GameObject>();
  }
  public GameObject checkObject(String identifier)
  {
    for (GameObject object : gameObjects) {
      if (object.getIdentifier() == identifier) {
        gameObject = object;
      }
    }
    return gameObject;
  }

  public void addGameObject(GameObject object) {
    recentlyAddedGameObjects.add(object);
  }

  public void removeGameObject(GameObject object) {
    markedForDeathGameObjects.add(object);
  }

  public void updateScene() {
    if (markedForDeathGameObjects.size() > 0) {
      for (GameObject object : markedForDeathGameObjects) {
        gameObjects.remove(object);
      }
      markedForDeathGameObjects  = new ArrayList<GameObject>();
    }
    if (recentlyAddedGameObjects.size() > 0) {
      for (GameObject object : recentlyAddedGameObjects) {
        gameObjects.add(object);
      }
      recentlyAddedGameObjects  = new ArrayList<GameObject>();
    }
    if (inventoryManager.inventoryItems.size() > 0) {
      for (GameObject object : inventoryManager.inventoryItems) {
        if (!gameObjects.contains(object))
        {
          gameObjects.add(object);
        }
      }
    }
    if (inventoryManager.bowls.size() == 2) {
      try {
        sceneManager.getCurrentScene().removeGameObject(checkObject("rightArrowMain"));
        //checkObject("rightArrowMain").isActive = true;
        //checkObject("rightArrowMainLight").isActive = false;
      }
      catch(Exception e) {
        println(e.getMessage());
      }
    }
  }

  public void draw(int wwidth, int wheight) {
    image(backgroundImage, 0, 0, wwidth, wheight);
    for (GameObject object : gameObjects) {
      object.draw();
    }
  }

  public void mouseMoved() {
    for (GameObject object : gameObjects) {
      object.mouseMoved();
    }
  }

  public void mouseClicked() {
    for (GameObject object : gameObjects) {
      object.mouseClicked();
    }
  }
  public void mouseDragged() {
    for (GameObject object : inventoryManager.inventoryItems) {
      object.mouseDragged();
    }
  }
  public void mousePressed() {
    for (GameObject object : inventoryManager.inventoryItems) {
      object.mousePressed();
    }
  }
  public void mouseReleased() {
    for (GameObject object : inventoryManager.inventoryItems) {
      object.mouseReleased();
    }
  }

  public String getSceneName() {
    return this.sceneName;
  }
}

//class SceneManager
import java.util.Stack;
import java.util.HashMap;

class SceneManager {
  private HashMap<String, Scene> scenes;
  private Stack<Scene> scenesStack;
  
  public SceneManager() {
    scenes = new HashMap<String, Scene>();
    scenesStack = new Stack<Scene>();
  }
  
  public void addScene(Scene scene) {
    scenes.put(scene.getSceneName(), scene);
    if(scenesStack.size() == 0)
    {
      scenesStack.push(scene);
    }
  }
  
  public void goToScene(String sceneName) throws Exception {
    if(scenes.containsKey(sceneName)) {
      scenesStack.push(scenes.get(sceneName));
    }
    else {
      throw new Exception("Scene not found with name: "+ sceneName + "." + 
                           "Make sure it was added to the sceneManager.");
    }
  }
  
  public void goToPreviousScene() {
    scenesStack.pop();
  }
  
  public Scene getCurrentScene() {
    return scenesStack.peek();
  }
}

//class TextObject
class TextObject extends GameObject {
  private String text;
  private boolean displayText;
  private float textWidth;
  private float textHeight;
  
  public TextObject(String identifier, int x, int y, int owidth, 
                    int oheight, boolean isActive, String gameObjectImageFile, String text) {
    super(identifier, x, y, owidth, oheight, isActive, gameObjectImageFile);
    this.text = text;
    displayText = false;
    calculateTextArea(); //Automatically calculates the area 
                         //necessary to display the entire text.
  }
  //@Override
  //public void draw() {
  //  super.draw();
  //  if(displayText) {
  //    fill(255);
  //    rect(this.x, this.y, textWidth + 30, textHeight, 8);
  //    fill(0);
  //    text(text, this.x + 15, this.y + 15, textWidth, textHeight); 
  //  }
  //}
  @Override
  public void mouseClicked() {
    displayText = false;
    if(mouseIsHovering) { displayText = true; }
  }
  
  public void calculateTextArea() {
    textWidth = textWidth(text);
    float remaining = textWidth - 300;
    textWidth = (textWidth > 300) ? 300 : textWidth;
    textHeight = 50;
    while(remaining > 300)
    {
      textHeight += 30;
      remaining -= 300;
    }
  }
}

// Main Code
int wwidth = 1920;
int wheight = 1080;

final SceneManager sceneManager = new SceneManager();
final InventoryManager inventoryManager = new InventoryManager();
final LettersManager lettersManager = new LettersManager();


void settings()
{
  size(wwidth, wheight);
}
void setup()
{
  GameObject replacebrush1 = new GameObject("ReplaceBrush1", 50, 50, true, "Brush1.PNG");
  GameObject replacebrush2 = new GameObject("ReplaceBrush2", 50, 50, true, "Brush2.PNG");
  GameObject invWaterBrush = new GameObject("InvWaterBrush", 50, 50, true, "WaterBrush.PNG");
  GameObject invBloodBrush = new GameObject("InvBloodBrush", 50, 50, true, "BloodBrush.PNG");
  GameObject invWaterGoblet = new GameObject("InvWaterGoblet", 50, 50, true, "WaterGoblet.PNG");
  GameObject invBloodGoblet = new GameObject("InvBloodGoblet", 50, 50, true, "BloodGoblet.PNG");
  GameObject replaceGoblet = new GameObject("replaceGoblet", 50, 50, true, "Goblet.PNG");
  GameObject inventory = new GameObject("Inventory", 80, 32, 500, 100, true, "Inventory.PNG");



  Collectable bloodbrush = new Collectable("BloodBrush", "BloodBrush.PNG");
  Collectable waterbrush = new Collectable("WaterBrush", "WaterBrush.PNG");
  Collectable bloodgoblet = new Collectable("BloodGoblet", "BloodGoblet.PNG");
  Collectable watergoblet = new Collectable("WaterGoblet", "WaterGoblet.PNG");
  Collectable brush1 = new Collectable("Brush1", "Brush1.PNG");
  Collectable brush2 = new Collectable("Brush2", "Brush2.PNG");
  Collectable goblet = new Collectable("goblet", "Goblet.PNG");

  RequireObject fullwaterbowl = new RequireObject("FullWaterBowl", 430, 940, 100, 50, true, "FullWaterBowl.PNG", brush1, waterbrush, replacebrush1, invWaterBrush);
  RequireObject fullbloodbowl = new RequireObject("FullBloodBowl", 1300, 930, 100, 50, true, "FullBloodBowl.PNG", brush2, bloodbrush, replacebrush2, invBloodBrush);

  GameObject letterGCopy = new GameObject("LetterGCopy", 100, 100, true, "Letter_G.PNG");
  GameObject letterOCopy = new GameObject("LetterOCopy", 100, 100, true, "Letter_O.PNG");
  GameObject letterBCopy = new GameObject("LetterBCopy", 100, 100, true, "Letter_B.PNG");
  GameObject letterLCopy = new GameObject("LetterLCopy", 100, 100, true, "Letter_L.PNG");
  GameObject letterECopy = new GameObject("LetterECopy", 100, 100, true, "Letter_E.PNG");
  GameObject letterTCopy = new GameObject("LetterTCopy", 100, 100, true, "Letter_T.PNG");


  Scene scene01 = new Scene("scene01", "MainRoom.JPEG");
  MoveToSceneObject board = new MoveToSceneObject ("board", 860, 740, 100, 70, true, "Board.PNG", "scene04");
  scene01.addGameObject(board);
  MoveToSceneObject painting = new MoveToSceneObject("painting", 709, 88, 400, 400, true, "Painting.PNG", "scene05");
  scene01.addGameObject(painting);

  MoveToSceneObject leftArrow01 = new MoveToSceneObject ("leftArrowMain", 60, 369, 100, 300, true, "LeftArrow.PNG", "scene03");
  scene01.addGameObject(leftArrow01);
  CollectableObject object01 = new CollectableObject("brush1_scene01", 1120, 781, 50, 50, true, brush1, replacebrush1);
  scene01.addGameObject(object01);
  CollectableObject object02 = new CollectableObject("brush2_scene01", 645, 775, 50, 50, true, brush2, replacebrush2);
  scene01.addGameObject(object02);
  CollectableObject object03 = new CollectableObject("goblet_scene01", 860, 740, 50, 50, true, goblet, replaceGoblet);
  MoveToSceneObject rightArrow03 = new MoveToSceneObject ("rightArrowMainLight", 1804, 332, 100, 300, true, "RightArrow.PNG", "scene06");
  scene01.addGameObject(rightArrow03);
  MoveToSceneObject rightArrow01 = new MoveToSceneObject ("rightArrowMain", 1804, 332, 100, 300, true, "RightArrow.PNG", "scene02");
  scene01.addGameObject(rightArrow01);

  scene01.addGameObject(inventory);


  Scene scene02 = new Scene("scene02", "RightRoom.JPEG");
  MoveToSceneObject leftArrow02 = new MoveToSceneObject ("leftArrowRightRoom", 60, 369, 100, 300, true, "LeftArrow.PNG", "scene01");
  scene02.addGameObject(leftArrow02);
  RequireObject waterBowl = new RequireObject("EmptyWaterBowl", 430, 940, 100, 50, true, "EmptyWaterBowl.PNG", watergoblet, goblet, invWaterGoblet, replaceGoblet, fullwaterbowl, true, "scene06");
  scene02.addGameObject(waterBowl);
  RequireObject bloodBowl = new RequireObject("EmptyBloodBowl", 1300, 930, 100, 50, true, "EmptyBloodBowl.PNG", bloodgoblet, goblet, invBloodGoblet, replaceGoblet, fullbloodbowl, true, "scene06");
  scene02.addGameObject(bloodBowl);
  scene02.addGameObject(inventory);


  Scene scene03 = new Scene("scene03", "LeftRoom.JPEG");
  MoveToSceneObject rightArrow02 = new MoveToSceneObject ("rightArrowLeftRoom", 1804, 332, 100, 300, true, "RightArrow.PNG", "scene01");
  scene03.addGameObject(rightArrow02);
  //RequireObject water = new RequireObject("Water", 371, 970, 200, 50, "Water.PNG", brush1, waterbrush, replacebrush1, invWaterBrush);
  RequireObject water = new RequireObject("Water", 371, 970, 200, 50, true, "Water.PNG", goblet, watergoblet, replaceGoblet, invWaterGoblet);
  scene03.addGameObject(water);
  //scene03.addGameObject(water1);
  //RequireObject blood = new RequireObject("Blood", 1600, 970, 200, 50, "Blood.PNG", brush2, bloodbrush, replacebrush2, invBloodBrush);
  RequireObject blood = new RequireObject("Blood", 1600, 970, 200, 50, true, "Blood.PNG", goblet, bloodgoblet, replaceGoblet, invBloodGoblet);
  scene03.addGameObject(blood);
  //scene03.addGameObject(blood1);
  GameObject portal = new GameObject("Portal", 900, 940, 200, 100, false, "PentagramPortal.PNG");
  //scene03.addGameObject(portal);
  scene03.addGameObject(inventory);


  Scene scene04 = new Scene("scene04", "CloseBoard.JPEG");
  MoveToSceneObject downArrow01 = new MoveToSceneObject("downArrowBoard", 800, 900, 300, 100, true, "DownArrow.PNG", true);
  scene04.addGameObject(downArrow01);
  GameObject letterG = new GameObject("LetterG", 534, 614, 50, 50, true, "Letter_G.PNG", true, letterGCopy);
  scene04.addGameObject(letterG);
  GameObject letterO = new GameObject("LetterO", 705, 721, 50, 50, true, "Letter_O.PNG", true, letterOCopy);
  scene04.addGameObject(letterO);
  GameObject letterB = new GameObject("LetterB", 1117, 625, 50, 50, true, "Letter_B.PNG", true, letterBCopy);
  scene04.addGameObject(letterB);
  GameObject letterL = new GameObject("LetterL", 1327, 848, 50, 50, true, "Letter_L.PNG", true, letterLCopy);
  scene04.addGameObject(letterL);
  GameObject letterE = new GameObject("LetterE", 959, 780, 50, 50, true, "Letter_E.PNG", true, letterECopy);
  scene04.addGameObject(letterE);
  GameObject letterT = new GameObject("LetterT", 568, 889, 50, 50, true, "Letter_T.PNG", true, letterTCopy);
  scene04.addGameObject(letterT);
  GameObject eraser = new GameObject("Eraser", 1395, 567, 50, 50, true, "Eraser.PNG", true, board, object03);
  scene04.addGameObject(eraser);
  scene04.addGameObject(inventory);

  Scene scene05 = new Scene("scene05", "ClosePainting.JPEG");
  MoveToSceneObject downArrow02 = new MoveToSceneObject("downArrowPainting", 800, 900, 300, 100, true, "DownArrow.PNG", true);
  scene05.addGameObject(downArrow02);
  scene05.addGameObject(inventory);

  Scene scene06 = new Scene("scene06", "LightRightRoom.JPEG");
  scene06.addGameObject(fullwaterbowl);
  scene06.addGameObject(fullbloodbowl);
  MoveToSceneObject leftArrow03 = new MoveToSceneObject ("leftArrowLightRightRoom", 60, 369, 100, 300, true, "LeftArrow.PNG", "scene01");
  scene06.addGameObject(leftArrow03);
  scene06.addGameObject(inventory);


  sceneManager.addScene(scene01);
  sceneManager.addScene(scene02);
  sceneManager.addScene(scene03);
  sceneManager.addScene(scene04);
  sceneManager.addScene(scene05);
  sceneManager.addScene(scene06);
}

void draw()
{
  sceneManager.getCurrentScene().draw(wwidth, wheight);
  sceneManager.getCurrentScene().updateScene();
  inventoryManager.clearMarkedForDeathCollectables();
  inventoryManager.clearMarkedForDeathItems();
}

void mouseMoved() {
  sceneManager.getCurrentScene().mouseMoved();
}
void mouseClicked() {
  sceneManager.getCurrentScene().mouseClicked();
}
void mousePressed()
{
  println(mouseX);
  println(mouseY);
}
void mouseDragged()
{
  sceneManager.getCurrentScene().mouseDragged();
}

void mouseReleased()
{
  sceneManager.getCurrentScene().mouseReleased();
}
